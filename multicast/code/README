Sun Lin     108674057
Cheuk On CHUNG 110386696
email:  cochung1993@gmail.com

CSE 533
Instructor Liu
Assignment 4
2015, December 6


test case we use:

[root@vm3/root]# tour_chechung vm2 vm10 vm4 vm7 vm5 vm2 vm6 vm2 vm9 vm4 vm7 vm2 vm6 vm5 vm1 vm10 vm8


Design and implementation of 


*********tour********
typedef struct payload {
	int next_ip_idx;
	char multi_port[10];
	char multi_ip[INET_ADDRSTRLEN];
	int* hostArray[TOTAL_VM_SIZE];
} PayLoad;

In tour component, we store tour list into array. In each payload in ip packet, we have a next_ip_idx to store the current index.

*********tour********



********ping************
static int if_ping[PING_SIZE];
static int ping_counter_array[PING_SIZE];

we use  if_ping array to indicate if we have ping that vm or not.
We also save the number of ping by the ping_counter_array. For example,  ping_counter_array[2]=5 means we have pin vm2 5 times.



if (ping_switch_ == 1) {
	if (ping_counter_array[previous_vmNum_static] >= 5) {
					if (if_last_node == 1) {

in the select function, we set a time with one second. 
we have a static variable ping_switch_  to check if we should ping or not. If it is time to ping, then we set this variable to 1. 
So when the select 1 second comes, it can ping.

Every second we check if we have ping for 5 times and check if it is the last node. If both conditions are met, we do the multicast



********ping************








ARP Implementation:
We first find all the usable interfaces in the current machine, and save them
in a table. The table contains structs that contains the mac address, ip address,
and interface number of the interface of interest. We are only using the eth0
interface. Moreover, we find that there are no aliases on this interface.
The struct we used:
typedef struct interface {
	char macAddr[ETH_ALEN];
	char ipAddr[IPADDR_SIZE];
	int interfaceNum;
} Interface;

The arp module has a table of records. The records are structs, and are defined
as follows:
typedef struct arp_entry {
	char ipAddr[IPADDR_SIZE];
	char macAddr[ETH_ALEN];
	unsigned short sll_hatype;
	int sll_ifindex;
	int conn_fd;
} ArpEntry;
For each record, we must store the ip address and its corresponding mac address.
In addition, we need the hardware type and interface index as specified in the
assignment specs. The connection fd is an indicator to determine whether a
tour client is waiting for a response from arp.

Our arp modules has the follow message format:
typedef struct arp_message {
	unsigned char id[2];
	unsigned char hatype[2];
	unsigned char prottype[2];
	unsigned char hardsize;
	unsigned char protsize;
	unsigned char op[2];
	char sender_mac[ETH_ALEN];
	unsigned char sender_ip[IP_ALEN];
	char target_mac[ETH_ALEN];
	unsigned char target_ip[IP_ALEN];
} ArpMessage;
Most of the fields are as described in the arp documentation. The addition field
we added is the "id" field, which is a constant value that we determined to be
0x5403. This id is used to distinguish out messages apart from messages
generated by other students' programs.

To demonstrate that our arp module is working, we print out the contents of the
arp table, which shows all registered entries. If a new ip is requested, then
we add an entry in the table only if we are the destination node. If an entry
already exists, we will update it, regardless if we are the destination node.
To find the corresponding mac address of the queried ip, the node will send
a broadcast packet. The destination node will reply with the correct mac address
to the broadcast originator. The nod will update the table, and reply back to
the tour client who requested it. If the tour client requests for an ip that
already contains a valid mac address in our table, then we do not broadcast
a query.
